/*
Copyright 2019 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/knative/serving/pkg/apis/networking/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ActivationEndpointLister helps list ActivationEndpoints.
type ActivationEndpointLister interface {
	// List lists all ActivationEndpoints in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ActivationEndpoint, err error)
	// ActivationEndpoints returns an object that can list and get ActivationEndpoints.
	ActivationEndpoints(namespace string) ActivationEndpointNamespaceLister
	ActivationEndpointListerExpansion
}

// activationEndpointLister implements the ActivationEndpointLister interface.
type activationEndpointLister struct {
	indexer cache.Indexer
}

// NewActivationEndpointLister returns a new ActivationEndpointLister.
func NewActivationEndpointLister(indexer cache.Indexer) ActivationEndpointLister {
	return &activationEndpointLister{indexer: indexer}
}

// List lists all ActivationEndpoints in the indexer.
func (s *activationEndpointLister) List(selector labels.Selector) (ret []*v1alpha1.ActivationEndpoint, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActivationEndpoint))
	})
	return ret, err
}

// ActivationEndpoints returns an object that can list and get ActivationEndpoints.
func (s *activationEndpointLister) ActivationEndpoints(namespace string) ActivationEndpointNamespaceLister {
	return activationEndpointNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ActivationEndpointNamespaceLister helps list and get ActivationEndpoints.
type ActivationEndpointNamespaceLister interface {
	// List lists all ActivationEndpoints in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ActivationEndpoint, err error)
	// Get retrieves the ActivationEndpoint from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ActivationEndpoint, error)
	ActivationEndpointNamespaceListerExpansion
}

// activationEndpointNamespaceLister implements the ActivationEndpointNamespaceLister
// interface.
type activationEndpointNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ActivationEndpoints in the indexer for a given namespace.
func (s activationEndpointNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ActivationEndpoint, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ActivationEndpoint))
	})
	return ret, err
}

// Get retrieves the ActivationEndpoint from the indexer for a given namespace and name.
func (s activationEndpointNamespaceLister) Get(name string) (*v1alpha1.ActivationEndpoint, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("activationendpoint"), name)
	}
	return obj.(*v1alpha1.ActivationEndpoint), nil
}
